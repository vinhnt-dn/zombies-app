{"version":3,"file":"static/js/664.344f01d6.chunk.js","mappings":"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","sources":["os/providers/ui.provider.tsx","os/providers/pool.provider.tsx","os/providers/wallet.provider.tsx","os/providers/account.provider.tsx","os/providers/tokenProvider/index.ts","os/providers/mint.provider.tsx","shared/dataloader/index.ts","shared/pdb/index.ts"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n  CSSProperties,\n} from 'react'\n\nimport { ConfigProvider } from 'antd'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { UIState } from 'os/store/ui.reducer'\nimport { ConfigProviderProps } from 'antd/lib/config-provider'\n\nconst Context = createContext<UIProvider>({} as UIProvider)\n\nexport type UIProvider = {\n  ui: UIState\n}\n\n/**\n * UI Context Provider\n */\nconst UIContextProvider = ({\n  children,\n  appId,\n  style = {},\n  antd = false,\n}: {\n  children: ReactNode\n  appId: string\n  style?: CSSProperties\n  antd?: boolean | ConfigProviderProps\n}) => {\n  const { ui } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ ui }), [ui])\n  const configProvider = antd\n    ? {\n        getPopupContainer: () => document.getElementById(appId) as HTMLElement,\n        ...(typeof antd === 'object' ? antd : {}),\n      }\n    : undefined\n\n  return (\n    <Context.Provider value={provider}>\n      <section\n        id={appId}\n        style={{ height: '100%', backgroundColor: 'transparent', ...style }}\n      >\n        {configProvider ? (\n          <ConfigProvider {...configProvider}>{children}</ConfigProvider>\n        ) : (\n          children\n        )}\n      </section>\n    </Context.Provider>\n  )\n}\nexport default UIContextProvider\n\n/**\n * UI Context Consumer\n */\nconst UIComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * UI HOC\n */\nexport const withUI = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <UIComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </UIComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * UI Hook\n */\nexport const useUI = () => {\n  return useContext<UIProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { PoolsState } from 'os/store/pools.reducer'\n\nconst Context = createContext<PoolProvider>({} as PoolProvider)\n\nexport type PoolProvider = {\n  pools: PoolsState\n}\n\n/**\n * Pool Context Provider\n */\nconst PoolContextProvider = ({ children }: { children: ReactNode }) => {\n  const { pools } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ pools }), [pools])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default PoolContextProvider\n\n/**\n * Pool Context Consumer\n */\nconst PoolContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Pool HOC\n */\nexport const withPool = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <PoolContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </PoolContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Pool Hook\n */\nexport const usePool = () => {\n  return useContext<PoolProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { WalletState } from 'os/store/wallet.reducer'\n\nconst Context = createContext<WalletProvider>({} as WalletProvider)\n\nexport type WalletProvider = {\n  wallet: WalletState\n}\n\n/**\n * Wallet Context Provider\n */\nconst WalletContextProvider = ({ children }: { children: ReactNode }) => {\n  const { wallet } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ wallet }), [wallet])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default WalletContextProvider\n\n/**\n * Wallet Context Consumer\n */\nconst WalletContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Wallet HOC\n */\nexport const withWallet = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <WalletContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </WalletContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Wallet Hook\n */\nexport const useWallet = () => {\n  return useContext<WalletProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { AccountsState } from 'os/store/accounts.reducer'\n\nconst Context = createContext<AccountProvider>({} as AccountProvider)\n\nexport type AccountProvider = {\n  accounts: AccountsState\n}\n\n/**\n * Account Context Provider\n */\nconst AccountContextProvider = ({ children }: { children: ReactNode }) => {\n  const { accounts } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ accounts }), [accounts])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default AccountContextProvider\n\n/**\n * Account Context Consumer\n */\nconst AccountContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Account HOC\n */\nexport const withAccount = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <AccountContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </AccountContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Account Hook\n */\nexport const useAccount = () => {\n  return useContext<AccountProvider>(Context)\n}\n","import { Document } from 'flexsearch'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net } from 'shared/runtime'\nimport configs from 'os/configs'\nimport supplementary, { sntr, sol } from './supplementary'\n\nconst {\n  sol: { chainId },\n} = configs\nconst DELIMITER = /[\\W_]+/g\nconst PRESET = {\n  tokenize: 'full',\n  context: true,\n  minlength: 3,\n}\nconst DOCUMENT = {\n  document: {\n    id: 'address',\n    index: [\n      { field: 'symbol', ...PRESET },\n      { field: 'name', ...PRESET },\n    ],\n  },\n}\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: typeof Document | undefined\n  readonly chainId: typeof chainId\n  readonly cluster: typeof net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, any]> => {\n    if (this.tokenMap.size) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = new Document(DOCUMENT)\n      this.tokenMap.forEach(({ address, ...doc }) =>\n        this.engine.add(address, doc),\n      )\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit?: 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    keyword.split(DELIMITER).forEach((key) => {\n      const raw: Array<{ result: string[] }> = engine.search(key, limit)\n      return raw.forEach(({ result }) => {\n        return result.forEach((id: string) => {\n          if (tokens.findIndex(({ address }) => address === id) < 0) {\n            const token = tokenMap.get(id)\n            if (token) tokens.push(token)\n          }\n        })\n      })\n    })\n    return tokens\n  }\n}\n\nexport default TokenProvider\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  useCallback,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport {\n  useRootDispatch,\n  useRootSelector,\n  RootState,\n  RootDispatch,\n} from 'os/store'\nimport { getMint as _getMint, MintsState } from 'os/store/mints.reducer'\nimport TokenProvider from './tokenProvider'\nimport { account } from '@senswap/sen-js'\n\nconst tokenProvider = new TokenProvider()\nconst Context = createContext<MintProvider>({} as MintProvider)\n\nexport type MintProvider = {\n  mints: MintsState\n  getMint: (...agrs: Parameters<typeof _getMint>) => Promise<MintsState>\n  getDecimals: (mintAddress: string) => Promise<number>\n  tokenProvider: TokenProvider\n}\n\n/**\n * Mint Context Provider\n */\nconst MintContextProvider = ({ children }: { children: ReactNode }) => {\n  const dispatch = useRootDispatch<RootDispatch>()\n  const { mints, pools } = useRootSelector((state: RootState) => state)\n  const getMint = useCallback(\n    async (...agrs: Parameters<typeof _getMint>) =>\n      await dispatch(_getMint(...agrs)).unwrap(),\n    [dispatch],\n  )\n  const getDecimals = useCallback(\n    async (mintAddress: string) => {\n      if (!account.isAddress(mintAddress))\n        throw new Error('Invalid mint address')\n      // If the token is in token provider, return its decimals\n      const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n      if (tokenInfo?.decimals) return tokenInfo.decimals\n      // If the token is lp, return 9 as default\n      const index = Object.values(pools).findIndex(\n        ({ mint_lpt }) => mint_lpt === mintAddress,\n      )\n      if (index >= 0) return 9\n      // Fetch from the clustters\n      const mintData = await getMint({ address: mintAddress })\n      if (mintData[mintAddress]?.decimals) return mintData[mintAddress].decimals\n      throw new Error('Cannot find mint decimals')\n    },\n    [getMint, pools],\n  )\n  const provider = useMemo(\n    () => ({ mints, getMint, getDecimals, tokenProvider }),\n    [mints, getMint, getDecimals],\n  )\n  // Context provider\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default MintContextProvider\n\n/**\n * Mint Context Consumer\n */\nconst MintContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Mint HOC\n */\nexport const withMint = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <MintContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </MintContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Mint Hook\n */\nexport const useMint = () => {\n  return useContext<MintProvider>(Context)\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import localForage from 'localforage'\nimport { account } from '@senswap/sen-js'\nimport IPFS from './ipfs'\n\n/**\n * Persistent Database\n */\nclass PDB {\n  readonly dbName: string\n  private driver: any\n  private ipfs: IPFS\n\n  constructor(walletAddress: string) {\n    if (!account.isAddress(walletAddress)) throw new Error('Invalid address')\n    this.dbName = walletAddress\n    this.driver = [localForage.WEBSQL, localForage.LOCALSTORAGE]\n    this.ipfs = new IPFS()\n  }\n\n  /**\n   * Local\n   */\n\n  createInstance = (appId: string): LocalForage => {\n    return localForage.createInstance({\n      driver: this.driver,\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  dropInstance = async (appId: string): Promise<void> => {\n    const instance = this.createInstance(appId)\n    await instance.clear()\n    return await localForage.dropInstance({\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  all = async (): Promise<any> => {\n    let data: any = {}\n    const appIds = (\n      ((await this.createInstance('sentre').getItem('appIds')) as string[]) ||\n      []\n    )\n      .flat()\n      .concat(['sentre'])\n    for (const appId of appIds) {\n      data[appId] = {}\n      const instance = this.createInstance(appId)\n      await instance.iterate((value: string, key: string) => {\n        data[appId][key] = value\n      })\n    }\n    return data\n  }\n\n  /**\n   * Cloud\n   */\n\n  fetch = async (cid: string) => {\n    return await this.ipfs.get(cid)\n  }\n\n  backup = async () => {\n    const data = await this.all()\n    return await this.ipfs.set(data)\n  }\n\n  restore = async (cid: string) => {\n    // Download data\n    const data = await this.fetch(cid)\n    // Apply to storage\n    for (const appId in data) {\n      const instance = await this.createInstance(appId)\n      for (const key in data[appId]) {\n        const value = data[appId][key]\n        await instance.setItem(key, value)\n      }\n    }\n    return data\n  }\n}\n\nexport default PDB\n\n/**\n * High abtraction pdb for app\n */\nexport const createPDB = (walletArress: string, appId: string) => {\n  return account.isAddress(walletArress)\n    ? new PDB(walletArress).createInstance(appId)\n    : undefined\n}\n"],"names":["Context","createContext","children","appId","style","antd","ui","useRootSelector","state","provider","useMemo","configProvider","getPopupContainer","document","getElementById","undefined","Provider","value","id","height","backgroundColor","ConfigProvider","UIComsumer","Consumer","Children","child","cloneElement","withUI","WrappedComponent","HOC","Component","render","forwardedRef","rest","this","props","ref","forwardRef","useUI","useContext","pools","PoolContextComsumer","withPool","usePool","wallet","WalletContextComsumer","withWallet","useWallet","accounts","AccountContextComsumer","withAccount","useAccount","sol","chainId","configs","DELIMITER","PRESET","tokenize","context","minlength","DOCUMENT","index","field","constructor","tokenMap","engine","cluster","loading","queue","_init","async","size","Promise","push","resolve","tokenList","TokenListProvider","filterByChainId","getList","concat","supplementary","sntr","forEach","token","set","address","Document","doc","add","length","shift","all","Array","from","values","findByAddress","get","addr","find","keyword","limit","tokens","split","key","search","result","findIndex","Map","net","tokenProvider","TokenProvider","dispatch","useRootDispatch","mints","getMint","useCallback","_getMint","unwrap","getDecimals","account","mintAddress","Error","tokenInfo","decimals","Object","mint_lpt","mintData","MintContextComsumer","withMint","useMint","DataLoader","instanceKey","JSON","stringify","mapInstance","has","instance","newSingleFlight","SingleFlight","requestKey","callback","singleFlight","getSingleFlight","newRequest","RequestQueue","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","assign","DEFAULT_SINGLE_FLIGHT_CONFIG","cacheData","SingleFlightCache","isFetch","request","reject","fetch","validateLimit","addRequestQueue","createTimeLogs","then","response","cache","resolves","catch","error","rejects","finally","delete","fetchRequestQueue","clearInterval","setInterval","time","now","Date","getTime","calls","PDB","walletAddress","dbName","driver","ipfs","createInstance","localForage","name","storeName","dropInstance","clear","data","appIds","getItem","flat","iterate","cid","backup","restore","setItem","IPFS","createPDB","walletArress"],"sourceRoot":""}