{"version":3,"file":"static/js/294.c0360c0b.chunk.js","mappings":"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","sources":["shared/antd/ionicon/assets/icon-telegram.svg","shared/antd/ionicon/customs.tsx","shared/antd/ionicon/index.tsx","app/model/zombie.controller.tsx","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/index.ts","app/components/zombie/index.tsx","app/page/index.tsx","app/model/main.controller.tsx","app/widget/index.tsx","app/model/index.ts","app/bootstrap.app.tsx","shared/devTools.ts","shared/pdb/index.ts","shared/pdb/ipfs.ts","shared/storage.ts","shared/runtime.ts","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/util.ts"],"sourcesContent":["var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgIconTelegram(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"inherit\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\",\n    width: \"50px\",\n    height: \"50px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.137,6.552c-0.75-0.636-1.928-0.727-3.146-0.238l-0.002,0C41.708,6.828,6.728,21.832,5.304,22.445 c-0.259,0.09-2.521,0.934-2.288,2.814c0.208,1.695,2.026,2.397,2.248,2.478l8.893,3.045c0.59,1.964,2.765,9.21,3.246,10.758 c0.3,0.965,0.789,2.233,1.646,2.494c0.752,0.29,1.5,0.025,1.984-0.355l5.437-5.043l8.777,6.845l0.209,0.125 c0.596,0.264,1.167,0.396,1.712,0.396c0.421,0,0.825-0.079,1.211-0.237c1.315-0.54,1.841-1.793,1.896-1.935l6.556-34.077 C47.231,7.933,46.675,7.007,46.137,6.552z M22,32l-3,8l-3-10l23-17L22,32z\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconTelegram);\nexport default __webpack_public_path__ + \"static/media/icon-telegram.2450489f40d03000fe65fc1c6f238d85.svg\";\nexport { ForwardRef as ReactComponent };","import IconTele from './assets/icon-telegram.svg'\n\nexport const CUSTOM_ICONS: Record<string, string> = {\n  'logo-telegram': IconTele,\n}\n","/**\n * IonIcon 5\n * Credit https://ionic.io/ionicons\n */\n\nimport { forwardRef } from 'react'\nimport { CUSTOM_ICONS } from './customs'\n\n/**\n * IonIcon\n * @param name The icon name. You can find it here https://ionic.io/ionicons\n * @param className To modify the span class\n */\nconst IonIcon = forwardRef<\n  HTMLElement,\n  { name: string; className?: string } & any\n>(({ name, className, ...props }, ref) => {\n  const cln = className ? 'anticon ' + className : 'anticon'\n\n  return (\n    <span className={cln} {...props}>\n      {CUSTOM_ICONS[name] ? (\n        <ion-icon ref={ref} src={CUSTOM_ICONS[name]} />\n      ) : (\n        <ion-icon ref={ref} name={name} />\n      )}\n    </span>\n  )\n})\n\nexport default IonIcon\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type ZombieState = {\n  zombies: Zombie[]\n}\n\nexport type Zombie = {\n  id: number\n  name: string\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'zombie'\nconst initialState: ZombieState = {\n  zombies: [],\n}\n\n/**\n * Actions\n */\n\nexport const generateZombie = createAsyncThunk<\n  ZombieState,\n  { newZombie: Zombie },\n  { state: any }\n>(`${NAME}/generateZombie`, async ({ newZombie }, { getState }) => {\n  const {\n    zombie: { zombies },\n  } = getState()\n  console.log('Actions generate zombie: ', newZombie)\n  return { zombies: [...zombies, newZombie] }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      generateZombie.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","// import { Row } from 'antd'\nimport './index.less'\n\nconst Zombie = ({ zombieName }: { zombieName: any }) => {\n  return (\n    <div className=\"home-card game-card\">\n      <div className=\"zombie-char\">\n        <div className=\"zombie-loading zombie-parts\"></div>\n        <div className=\"zombie-card\">\n          <div className=\"card-header hide-overflow-text\">{zombieName}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Zombie\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useWallet, useAccount } from '@senhub/providers'\nimport { utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Button, Space, Card } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport {\n  generateZombie,\n  Zombie as ZombieModel,\n} from 'app/model/zombie.controller'\nimport configs from 'app/configs'\nimport { createPDB } from 'shared/pdb'\nimport Zombie from 'app/components/zombie'\n\nconst {\n  manifest: { appId },\n} = configs\n\nconst Page = () => {\n  const {\n    wallet: { address },\n  } = useWallet()\n  const { accounts } = useAccount()\n  const dispatch = useDispatch<AppDispatch>()\n  const { zombies } = useSelector((state: AppState) => state.zombie)\n  const [balance, setBalance] = useState(0)\n\n  const pdb = useMemo(() => createPDB(address, appId), [address])\n  const generate = useCallback(async () => {\n    const newZombie: ZombieModel = {\n      id: Math.random(),\n      name: 'Test',\n    }\n    dispatch(generateZombie({ newZombie }))\n  }, [dispatch])\n\n  // const getBlanceValue = useCallback(\n  //   async (accountAddress: string) => {\n  //     let mintData = await window.sentre.splt.getMintData(\n  //       accounts[accountAddress].mint,\n  //     )\n  //     let accountData = await window.sentre.splt.getAccountData(accountAddress)\n  //     return Number(utils.undecimalize(accountData.amount, mintData.decimals))\n  //   },\n  //   [accounts],\n  // )\n\n  const getAccountData = useCallback(async () => {\n    // const nodeUrl = 'https://api.devnet.solana.com'\n    // const lamports = new Lamports(nodeUrl)\n    let balance = await window.sentre.lamports.getLamports(address)\n    setBalance(balance)\n    console.log('balance: ', balance)\n    console.log('accounts: ', accounts)\n    for (const accountAddress in accounts) {\n      let mintData = await window.sentre.splt.getMintData(\n        accounts[accountAddress].mint,\n      )\n      let accountData = await window.sentre.splt.getAccountData(accountAddress)\n      console.log('accountData: ', accountAddress, accountData)\n      console.log('minData: ', accounts[accountAddress].mint, mintData)\n      console.log(\n        'Balance mint: ',\n        Number(utils.undecimalize(accountData.amount, mintData.decimals)),\n      )\n    }\n  }, [address, accounts])\n\n  useEffect(() => {\n    if (pdb) pdb.setItem('zombies', zombies)\n  }, [pdb, zombies])\n\n  return (\n    <Row gutter={[24, 24]} align=\"middle\">\n      <Col span={24}>\n        <Space align=\"center\">\n          <IonIcon name=\"newspaper-outline\" />\n          <Typography.Title level={4}>Page</Typography.Title>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Card className=\"card-page card-sen-test scrollbar\">\n          <Row gutter={[24, 24]} align=\"middle\">\n            {/* Header */}\n            <Col flex=\"auto\">\n              <Typography.Title level={4}>Sen Test</Typography.Title>\n            </Col>\n            <Col span={24}>\n              <Typography.Text>Address: {address}</Typography.Text>\n            </Col>\n            <Col span={24}>\n              <Typography.Text>Lamports: {balance}</Typography.Text>\n            </Col>\n            {accounts &&\n              Object.keys(accounts).map((accountAddress, index) => (\n                <div key={index}>\n                  <Col span={24}>\n                    <Typography.Text>\n                      Account Address: {accountAddress}\n                    </Typography.Text>\n                  </Col>\n                  <Col span={24} key={index}>\n                    <Typography.Text>Amount:</Typography.Text>\n                  </Col>\n                </div>\n              ))}\n          </Row>\n        </Card>\n      </Col>\n      <Col>\n        <Button onClick={getAccountData}>Get account data</Button>\n      </Col>\n      <Col>\n        <Button onClick={generate}>Generate Zombie</Button>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[24, 24]} justify=\"space-between\">\n          {zombies &&\n            zombies.map((zombie, index) => (\n              <Col\n                className=\"gutter-row\"\n                lg={{ span: 6 }}\n                md={{ span: 12 }}\n                xs={{ span: 24 }}\n                key={index}\n              >\n                <Zombie zombieName={zombie.name}></Zombie>\n              </Col>\n            ))}\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Page\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  counter: number\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: State = {\n  counter: 0,\n}\n\n/**\n * Actions\n */\n\nexport const increaseCounter = createAsyncThunk<State, void, { state: any }>(\n  `${NAME}/increaseCounter`,\n  async (_, { getState }) => {\n    const {\n      main: { counter },\n    } = getState()\n    return { counter: counter + 1 }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      increaseCounter.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useUI } from '@senhub/providers'\n\nimport { Row, Col, Typography, Space, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { increaseCounter } from 'app/model/main.controller'\nimport { env } from 'shared/runtime'\n\nconst Widget = () => {\n  const {\n    ui: { width, infix },\n  } = useUI()\n  const dispatch = useDispatch<AppDispatch>()\n  const { counter } = useSelector((state: AppState) => state.main)\n  const increase = useCallback(() => dispatch(increaseCounter()), [dispatch])\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Space align=\"center\">\n          <IonIcon name=\"apps-outline\" />\n          <Typography.Title level={4}>Widget</Typography.Title>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Typography.Text>\n          Env: {env} - {width}px - {infix}\n        </Typography.Text>\n      </Col>\n      <Col>\n        <Typography.Text>Counter: {counter}</Typography.Text>\n      </Col>\n      <Col>\n        <Button onClick={increase}>Increase</Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Widget\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport main from 'app/model/main.controller'\nimport zombie from 'app/model/zombie.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools(process.env.REACT_APP_ID as string),\n  reducer: {\n    main,\n    zombie,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport {\n  WalletProvider,\n  UIProvider,\n  AccountProvider,\n  PoolProvider,\n  MintProvider,\n} from '@senhub/providers'\n\nimport PageView from 'app/page'\nimport WidgetView from 'app/widget'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nimport 'app/static/styles/index.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <WalletProvider>\n        <PoolProvider>\n          <MintProvider>\n            <AccountProvider>\n              <Provider store={model}>\n                <PageView />\n              </Provider>\n            </AccountProvider>\n          </MintProvider>\n        </PoolProvider>\n      </WalletProvider>\n    </UIProvider>\n  )\n}\n\nexport const widgetConfig: WidgetConfig = {\n  size: 'small',\n  type: 'solid',\n}\n\nexport const Widget = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <Provider store={model}>\n        <WidgetView />\n      </Provider>\n    </UIProvider>\n  )\n}\n","// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import localForage from 'localforage'\nimport { account } from '@senswap/sen-js'\nimport IPFS from './ipfs'\n\n/**\n * Persistent Database\n */\nclass PDB {\n  readonly dbName: string\n  private driver: any\n  private ipfs: IPFS\n\n  constructor(walletAddress: string) {\n    if (!account.isAddress(walletAddress)) throw new Error('Invalid address')\n    this.dbName = walletAddress\n    this.driver = [localForage.WEBSQL, localForage.LOCALSTORAGE]\n    this.ipfs = new IPFS()\n  }\n\n  /**\n   * Local\n   */\n\n  createInstance = (appId: string): LocalForage => {\n    return localForage.createInstance({\n      driver: this.driver,\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  dropInstance = async (appId: string): Promise<void> => {\n    const instance = this.createInstance(appId)\n    await instance.clear()\n    return await localForage.dropInstance({\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  all = async (): Promise<any> => {\n    let data: any = {}\n    const appIds = (\n      ((await this.createInstance('sentre').getItem('appIds')) as string[]) ||\n      []\n    )\n      .flat()\n      .concat(['sentre'])\n    for (const appId of appIds) {\n      data[appId] = {}\n      const instance = this.createInstance(appId)\n      await instance.iterate((value: string, key: string) => {\n        data[appId][key] = value\n      })\n    }\n    return data\n  }\n\n  /**\n   * Cloud\n   */\n\n  fetch = async (cid: string) => {\n    return await this.ipfs.get(cid)\n  }\n\n  backup = async () => {\n    const data = await this.all()\n    return await this.ipfs.set(data)\n  }\n\n  restore = async (cid: string) => {\n    // Download data\n    const data = await this.fetch(cid)\n    // Apply to storage\n    for (const appId in data) {\n      const instance = await this.createInstance(appId)\n      for (const key in data[appId]) {\n        const value = data[appId][key]\n        await instance.setItem(key, value)\n      }\n    }\n    return data\n  }\n}\n\nexport default PDB\n\n/**\n * High abtraction pdb for app\n */\nexport const createPDB = (walletArress: string, appId: string) => {\n  return account.isAddress(walletArress)\n    ? new PDB(walletArress).createInstance(appId)\n    : undefined\n}\n","import { create, isIPFS } from 'ipfs-core'\nimport { asyncWait } from 'shared/util'\n\nclass IPFS {\n  private _ipfs: any = async () => {\n    try {\n      if (!window.ipfs) window.ipfs = await create()\n      return window.ipfs\n    } catch (er) {\n      await asyncWait(500)\n      return await this._ipfs()\n    }\n  }\n\n  static isCID = (cid: string | undefined | null): boolean => {\n    try {\n      if (!cid) return false\n      return isIPFS.multihash(cid)\n    } catch (er) {\n      return false\n    }\n  }\n\n  get = async (cid: string) => {\n    if (!IPFS.isCID(cid)) throw new Error('Invalid CID')\n    const ipfs = await this._ipfs()\n    const stream = await ipfs.cat(cid)\n    let raw = ''\n    for await (const chunk of stream) raw += Buffer.from(chunk).toString()\n    const data = JSON.parse(raw)\n    return data\n  }\n\n  set = async (data: object): Promise<string> => {\n    if (!data) throw new Error('Empty data')\n    const raw = JSON.stringify(data)\n    const ipfs = await this._ipfs()\n    const { path: cid } = await ipfs.add(raw)\n    return cid as string\n  }\n}\n\nexport default IPFS\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n"],"names":["CUSTOM_ICONS","forwardRef","ref","name","className","props","cln","src","NAME","generateZombie","createAsyncThunk","async","newZombie","getState","zombie","zombies","console","log","createSlice","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","Object","assign","shared","appId","process","url","devnet","node","spltAddress","splataAddress","testnet","mainnet","manifest","development","staging","production","env","sol","net","zombieName","configs","wallet","address","useWallet","accounts","useAccount","dispatch","useDispatch","useSelector","balance","setBalance","useState","pdb","useMemo","createPDB","generate","useCallback","id","Math","random","getAccountData","window","sentre","lamports","getLamports","accountAddress","mintData","splt","getMintData","mint","accountData","Number","utils","amount","decimals","useEffect","setItem","Row","gutter","align","Col","span","Space","Typography","level","Card","flex","keys","map","index","Button","onClick","justify","lg","md","xs","increaseCounter","_","main","counter","ui","width","infix","useUI","increase","configureStore","middleware","getDefaultMiddleware","bigintSerializationMiddleware","devTools","reducer","Page","UIProvider","antd","WalletProvider","PoolProvider","MintProvider","AccountProvider","Provider","store","model","widgetConfig","size","type","Widget","appName","BigInt","prototype","toJSON","this","toString","serializableCheck","isSerializable","val","Array","isArray","obj","proto","getPrototypeOf","isPlainObject","PDB","constructor","walletAddress","dbName","driver","ipfs","createInstance","localForage","storeName","dropInstance","instance","clear","all","data","appIds","getItem","flat","concat","iterate","value","key","fetch","get","cid","backup","set","restore","account","Error","IPFS","walletArress","undefined","_ipfs","create","er","asyncWait","isCID","stream","cat","raw","chunk","Buffer","from","JSON","parse","stringify","path","add","isIPFS","KEY","localStorage","convert","e","storage","getNetwork","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","limit","calls","time","cache","RequestQueue","resolveQueue","rejectQueue","resolve","reject","push","resolves","length","shift","rejects","error","SingleFlightCache","mapCache","setTimeout","delete","Map","DataLoader","instanceKey","mapInstance","has","newSingleFlight","SingleFlight","requestKey","callback","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","cacheData","Promise","isFetch","request","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","now","Date","getTime","ms"],"sourceRoot":""}